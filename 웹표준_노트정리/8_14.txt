8_14

모달창
_________________________________

오전: jQueryUI 
오후: 평가 및 자바구성요소 설명.


함수 = 기능들을 묶어놓은 것.
원하는 기능들을 묶어놓은 이유
-> 내가 원할 때 필요한 것들을 쓰기위해...?
특정한 일을 수행할 때 편안하게 사용하기 위해...? 서랍장 캐비닛? 내가 원하는 것을 전부 수행할 수 있도록...? 
문법에만 맞게 넣어놓기...!(중괄호가 엉키지 않는다거나! , )
내가 필요에 따라서 명령어를 한곳에 모아놓고 필요할 때마다 호출해서 이용할 목적으로 만든 것 이 함수. 여러번 쓸거면 만들어 놓는게... 가독성, 프로그램 분석에 도움?






dialog
position: {my: "center center", at: "center cneter", of: window} 
my = 

___________________________________________
jQueryUI 훑어보기

Tabs 위젯
<div id="myTab">
	<ul>
            <li><a href="#tab1"> Tab1</a></li>
            <li><a href="#tab2"> Tab2</a></li>
        </ul>
        <div id="tab1">Tab1의 내용입니다.</div>
        <div id="tab2">Tab2의 내용입니다.</div>
</div>

disabled 옵션.
:해당 탭을 비활성화 함

______________________________________________

Dialog 위젯
<div id="dialog" title="제목부분">
	내용 부분
</div>

$(function(){
	let option ={
		modal:true,
		resizable: false,
	}
}

modal 옵션. (boolean, false)
: dialog 이외의 것들은 비활성화 됨

resizable 옵션 (boolean, true)
: dialog의 박스 사이즈 조절가능 여부


*적용할 옵션이 많다면 변수에 담아 한번에 적용하는 것도 좋은 방법이다.



___________________

1. 독립적인 프로그램을 지니고 있다.
(jvm이 윈도우에도 리눅스에도 쓰이고 그 위에 껍데기 자바프로그램을 모자씌우듯이 하는 것)


jdk(java developer toolkit.(자바개발툴/자바개발기) 오라클에서 설치) > jre(java runtime environmentrk (자바 실행기)  jdk에 포함되어 있음.)
jvm"jdk안에 들어가있음"

jvm(자바가상머신)은 cpu를 가상화시킨것.(메모리에 올리지 않으면 결과를 확인할 수 없기 때문...?)

오라클 db mysql
_________________________

2. 객체지향 프로그래밍

객체 = 눈확인 만질 + 오감으로 느낄 수 있는 것
예를 들면 불빛 까지도 객체라고 치부(삼고)하고 개발 할 수 있으.ㅁ

예시 물.
물을 객체로 삼았다. 물이라는 클래스를 만들거야
물이라는 객체가 왜 필요하지? 물의 용량(L). 따라서 L라는 변수를 지정.(필요한 게 있으면 모두 변수로 잡아야 함.)
물의 종류.. type이란 변수 지정.(생수, 보리차.... stirng 로 잡아야함) boolean으로 대충 정해도 되고~
계산할거야! int(정수)지정. 안할거면 뭐~ 자료형은 문자형(string)으로 잡던지.
즉, 물이라는 객체를 내가 정의하는 것.

정의 -> 생성(메모리에요....) ->  

객체지향프로그램이라는 것.
일단 땅을 만들어놓고,
시멘트, 철근, 등등 이 필요함(다 객체임)
이걸 다 모아서 집을 짓는 것.
여러개의 객체의 집합으로 내가 원하는 객체를 만드는 것.
주소가 할당되면서부터 객체에게 끊임없는 요청이 들어옴(집을 만들고 나서. 주소=메모리상에 존재하는 주소체재)
이 주소로 요청이 흘러들어오는 것. 다행히 자바에서는 주소를 바꿀 수 없음.gc(가비지컬렉터)가 관리함.

목적을 달성하기 위해 프로그램을 *짜는 것이 아니라* 이미 제공되고 있는 객체들을 가져다가 쓰는 것!=객체지향 프로그래밍.
많은 전문가들이 자바를 레고와 같다고 하는 이유가 바로 이런 것.

3. 가비지컬렉션


4. 멀티스레드
자바는 멀티스레드를 지원함. 
분업화수행을 위해 사용. 
멀티스레드는 내가 주방에서 일을하는 동안은 홀에서 무슨 일이 일어나도 모름.
일처리도 홀에서 담당. 그리고 주방은 자기일 끝났다고 도와주는게 아니라 퇴근해버림(소멸)즉, 별개임.(완전히 분리된 움직임이고 연계되지 않음)
__________________________________________

자바의 실행구조
.java가 확장자인 파일.
javac = 자바컴파일러.

EX1.java 
class 파일은 jvm에 올리기 위한 파일. jvm이 이해함.

컴파일단계와 해석단계를 거쳐야 결과화면이 보이는 것.

따라서 서버에 올릴 땐 **클래스파일**을 올려야 함! 소스파일이 아니라!!!


___________________
젠키스 깃에 올라온 내용을 알아서 받아서 서버로 배포함.
__________________
식별자: 이름. 을 의미.
class명,  변수명, 메소드(=함수)명 . 는 숫자로 시작하면 안됨.공백도 들어가면 안됨. 예약어도 안됨(이미 누군가가 쓰겠다고 예약을 걸어놓은 명칭)


클래스명의 정의규칙.

객체 : 재료
클래스: 설계도면
행위:생성단계
클래스에 필요했던 함수,변수... = 멤버




public static void main(Stirng[]
=메인함수는 왜 못바꿀까?
jvm이 메인함수를 자동으로 호출하는데,
항상 main함수를 자동으로 호출해야하는데, 저부분을 고치게되면 jvm이 이 함수를 찾을 수 없음. 따라서 호출하지 못하고 오류가 발생.
jvm이 메인함수를 호출하면서 해당 파일은 시작되는 것임.제어가 jvm에서 나와서 여기저기 돌아가다가 다시 jvm으로 제어권이 돌아가면(함수는 호출되고 다시 출발한 곳으로 돌아가니까) 프로그램이 끝남.
클래스에서 만드는 변수 = 멤버변수
main함수 내부에서 만든 변수 = 지역변수



static 때문에 같이 static으로 선언된 애들만 같이 쓸 수 있음.
따라서 car클래스에 선언했던 변수는 main 함수에서는 바로 사용할 수 없음.
class Car{
	String model;
	String comp;
	public static void main(String[] arg){
	
	{
메모리가 3가지?
메모리구조****************************
메모리는 jvm안에 있는애임.
1. Stack 영역(퍼스트인? 라스트아웃?=처음들어간 애가 나중에 나온다.)
	1) 스택에 뭐가 만들어지는가? 가벼운 *변수*들이 생기는 곳.
2. Heap 영역
	1) 힙에는 뭐가 만들어지는가? *객체*가 생기는 곳.
3. Static 영역
	1) 프로그램이 끝날 때까지 딱 한개만 만들고 싶을 때 static으로 선언하는 것.static으로 선언된 애들이 생성되는 곳.
	만들면 만들수록 x 1개 딱 만들고 맘.????? 제한이 1개밖에 없다는거야? 아니면 한번쓰고 갖다 버린다는거야? 뭔말이지??
	어떻게 만들어지느냐? 클래스이름을 동반해서 만들어짐.
		Car.main(){} / Car.model□(변수이지만 static으로 선언(static String model;)하면 여기에 생성됨)  요런 모습으로 스태틱영역에 만들어짐.

해저관계..? 잊어..관..계..?



class Car{
	staticString model;
	String comp;
	public static void main(String[] arg){
	
	}

Car라는 객체를 Car클래스 하나를 가지고 여러개 만들었을 때.
Car(객체 자료형Heap에 생기는 애들. 기본자료형(int, stirng...)들은 stack에 생김.)
Car c1 = new Car();  -> 여기서 객체가 만들어지는 것.
Car c2 = new Car();  -> new는 무조건 어쨌든 새로 만들라는 뜻!!
위의 경우에 stack 에 c1□ c2□ 이 생성되고
Heap에 Car(){comp□, model(Car.model의 주소)} Car(){comp□, model(Car.model의 주소}이 만들어지고
static에 Car.model□ , Car.main(){}이 생성되는 것.(공유의 개념) 결국 c1과 c2의 model값은 늘 일치.
스태틱에 저장되는게 뭔지를 모르겟음.....

Spring 와왕와왕왕왕 중요!!!!!




class Car{
	staticString model;
	String comp;
	public static void main(String[] arg){
	
	}

Car c1 = new Car();
Car c2 = new Car();

stack					heap						static
 
c1(참조변수,				Car(){						main(){}
  heap에 Car()의 주소)	   		   model(참조변수, Car.model의 주소)				 
					   comp(인스턴스변수)				Car.model (static변수, 모델 이름)
				   	}							
											
	
c2					Car(){
(참조변수,			   	   model(참조변수, Car.model의 주소)
  heap에서 Car()의 주소)			   comp(인스턴스변수)						
				   	}
					

굳이 static 변수를 사용하는 이유는?

인스턴스변수 여러개 보다 (static변수1개 + 참조변수 여러개)가 더 가벼워서?

객체를 만들지 않고도 해당 변수가 필요한 일이 자주 있어서?

static객체의 예시 ->Math.round 요런 애들!!! 요런애들은 있으면 확실히 불러서 쓰기 좋긴 하겠다!!







질문______________________
말줄이기 여러줄로 줄일 수는 없는지
그 프로그램 써지지가 않는데 어떻게 쓰는건지!!

일단 깃을 보내고 
오늘 집가기전에 7/26일까지 올리고
오늘 배운부분 올리고! 집간당
